<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>代理相关概念介绍</title>
    <url>/2022/08161732.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>虽然是科班出身，搭个网站疯狂补漏，丢人！所以这篇文章可能写得很幼稚。大佬跳过。</p>
<h2 id="2-代理"><a href="#2-代理" class="headerlink" title="2. 代理"></a>2. 代理</h2><p>先讲一下C-S架构：</p>
<p><strong>C(client)<strong>客户端，</strong>S(server)<strong>服务端。CS架构即</strong>客户端</strong>通过接受用户的请求，通过网络向<strong>服务端</strong>提出请求；服务端接受请求后，将数据返回给<strong>客户端</strong>，<strong>客户端</strong>再将数据呈现给用户。如图1所示:</p>


<br>

<p><u><strong>代理</strong>的意思就是找个中间人来帮忙干事情。根据是客户端还是服务端主动使用代理，代理可分为<strong>正向代理</strong>和<strong>反向代理</strong>。</u></p>
<h3 id="2-1-正向代理"><a href="#2-1-正向代理" class="headerlink" title="2.1 正向代理"></a>2.1 正向代理</h3><p><strong>正向代理就是客户端主动使用代理服务器帮自己干活</strong>。其实就是<u>客户端将请求发送给代理服务器，代理服务器(中间人)代替客户端发送请求给服务端，服务端返回数据给代理服务器，代理服务器再将数据返回给客户端。</u>如图2所示：记住，这里是客户端主动使用代理服务器，所以把他俩框一块了。</p>


<p>因为服务端将信息返回给向它提交请求的代理服务器，所以对于服务端来说代理服务器就是其客户端，原始客户端其实是看不到的(即透明的)，所以<strong>客户端可通过使用正向代理隐藏自己的IP</strong>。正向代理常见应用场景就是你主动用某些软件fān qiáng（绕过网络审查）。</p>
<h3 id="2-2-反向代理"><a href="#2-2-反向代理" class="headerlink" title="2.2 反向代理"></a>2.2 反向代理</h3><p>反向代理则是<strong>服务端主动使用代理服务器</strong>。即在反向代理中，<u>客户端发送的请求是先被传给代理服务器，代理服务器再将请求发送给服务端，服务端返回数据给代理服务器，代理服务器再将数据返回给客户端。</u>如图3所示：</p>


<p>所以在这个流程中，客户端发送请求和接受数据的直接对象都是代理服务器，即对于客户端来说，服务端其实是透明的。<strong>所以说服务端可以通过使用反向代理隐藏自己的IP</strong>。反向代理常见应用就是<strong>负载均衡</strong>、<strong>提高服务器的安全</strong>，这里就不展开了。</p>
<hr>

<p>最后总结一下二者区别:</p>
<ol>
<li><strong>二者的本质区别在于是谁主动使用代理服务器，客户端主动使用就是正向代理，服务端主动使用就是反向代理。</strong>从上面的两段描述中你可以知道二者不是互斥的关系，即我客户端可以用代理服务器来隐藏自己；与此同时，我服务端也可以用代理服务器来隐藏自己。(搁这玩谍战呢)</li>
<li>作用不同：正向代理主要是用来解决访问限制的问题。而反向代理则是提供负载均衡、安全防护等作用。</li>
</ol>






<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/weixin_44404384/article/details/114675894">1.正向代理和反向代理详解（纯小白必看 最好懂的白话文教程）</a></p>
]]></content>
      <categories>
        <category>搭建网站</category>
      </categories>
  </entry>
  <entry>
    <title>(Torch)深度学习小项目搭建(一):项目的参数配置</title>
    <url>/2022/080540937.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="argparse（命令行参数解析器）"><a href="#argparse（命令行参数解析器）" class="headerlink" title="argparse（命令行参数解析器）"></a>argparse（命令行参数解析器）</h2><p>这玩意学了忘，建项目要用时忘了再学。。打算跟它清算干净了。</p>
<p>大体流程如下：创建解析器-&gt;添加参数-&gt;解析参数</p>
<h3 id="1-1-创建解析器"><a href="#1-1-创建解析器" class="headerlink" title="1.1 创建解析器"></a>1.1 创建解析器</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> argparse
parser<span class="token operator">=</span>argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="1-2-添加参数"><a href="#1-2-添加参数" class="headerlink" title="1.2 添加参数"></a>1.2 添加参数</h3><pre class="line-numbers language-python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>add_argument()方法</strong>常用参数：</p>
<p><strong>type</strong>：指定参数的类型</p>
<p><strong>default</strong>：参数默认值</p>
<p><strong>help</strong>：运行-h时，help的内容随参数一同显示</p>
<p><strong>action</strong>：常用值: store_true,store_false</p>
<pre class="line-numbers language-tex"><code class="language-tex">转载自https://www.zhihu.com/question/56692630
关于store_true 触发action时为真，不触发则为假，store_false相反
parser.add_argument('-c', action='store_true')
#python test.py -c         => c是true（触发）
#python test.py             => c是false（无触发）
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><u>命令行的参数分为<strong>位置参数</strong>和<strong>可选参数</strong></u></p>
<p>比如添加一个可选参数可以如下（解析器默认将<strong>’-‘符号当前缀</strong>的参数认成<strong>可选参数</strong>）</p>
<pre class="line-numbers language-python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-f'</span><span class="token punctuation">,</span><span class="token string">'--foo'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 命令行用输入参数时这两种都能表示，这是种约定俗成的写法，单字母-，多字母--</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>添加一个位置参数（不用’-‘就是位置参数）,<strong>位置参数必须给定配置</strong>,见下例：</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#文件名为test.py</span>
<span class="token keyword">import</span> argparse
parser<span class="token operator">=</span>argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>
args<span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码：</p>
<pre class="line-numbers language-shell"><code class="language-shell">python test.py             =>error: the following arguments are required: x
python test.py 12345       =>12345
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>多个位置参数时，根据位置参数的代码顺序给定位置参数配置，也即在输入的命令行中，<strong>除去所有<code>-|--</code>开头的参数及其带上的参数值之外，剩下的参数都为位置参数</strong>，其顺序依次对应使用<em>add_argument</em>注册的位置参数顺序。</p>
<h3 id="1-3解析参数"><a href="#1-3解析参数" class="headerlink" title="1.3解析参数"></a>1.3解析参数</h3><pre class="line-numbers language-python"><code class="language-python">args<span class="token operator">=</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>它将检查命令行，把每个参数转换为适当的类型然后调用相应的操作</p>
<h3 id="1-4-其他"><a href="#1-4-其他" class="headerlink" title="1.4 其他"></a>1.4 其他</h3><p><strong>①</strong>再聊聊<code>argparse.ArgumentParser()</code>常用的两个参数吧(对我来说，emm)。</p>
<p><strong>description</strong>：用来写一段内容，描述程序想要做的事情。</p>
<p><strong>fromfile_prefix_char</strong>:从文件读取参数，文件名参数的前缀(默认None)。比如：比如传入‘@’,则任何以 @ 开头的参数会被当成文件处理并被文件中的内容所替换。这种参数读取方法适用于参数量较大，不好在命令行直接输入的情况。</p>
<p>文件的读取方法是一行读取1个。（ps:如果是可选参数那个后面那个参数就是它的值）。 此处跟后面有呼应。</p>
<p>例子：</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'args.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'-f\nbar'</span><span class="token punctuation">)</span>
parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>fromfile_prefix_chars<span class="token operator">=</span><span class="token string">'@'</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-f'</span><span class="token punctuation">)</span>
args<span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'@args.txt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#相当于parser.parse_args(['-f','bar'])</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>f<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#>> bar</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>②argparse通常会跟sys模块一块用</strong></p>
<p><strong>sys.argv</strong>  就是一个从程序外部获取参数的桥梁。其本质是一个存储命令行参数的<strong>列表</strong>,<code>sys.argv[0]</code>为程序名本身  </p>
<hr>

<hr>

<p><strong>下面是个例子</strong></p>
<p>比如我想实现：python train.py cfg.txt  实现把cfg.txt（用于存储可选参数和对应值）中的参数加载到train.py(内含参数解析器来接受命令行参数)，要怎么写？</p>
<p>假设cfg.txt内容如下(很丑是吧，等等改)：</p>
<pre class="line-numbers language-text"><code class="language-text">--data_path
xxx
--img_height
200
--img_width
200
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>train.py内容如下：</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#写完parser的内容</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> argparse
parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"GAT"</span><span class="token punctuation">,</span>fromfile_prefix_chars<span class="token operator">=</span><span class="token string">'@'</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--data_path'</span><span class="token punctuation">,</span>    type<span class="token operator">=</span>str<span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">"the path of your datasets"</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--img_width'</span><span class="token punctuation">,</span>    type<span class="token operator">=</span>int<span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">"the area width you choose for random crop graph "</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--img_height'</span><span class="token punctuation">,</span>   type<span class="token operator">=</span>int<span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">"the area height you choose for random crop graph "</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#解析参数（结合上面的sys.argv的介绍去理解）：</span>
<span class="token keyword">if</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>
    argsfile_with_prefix<span class="token operator">=</span><span class="token string">'@'</span><span class="token operator">+</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    args<span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">[</span>argsfile_with_prefix<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    args<span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后命令行到脚本对应目录后（用pycharm的命令行会自动找到路径的），输入下行左侧的命令，可得右侧结果</p>
<pre class="line-numbers language-shell"><code class="language-shell"># python train.py cfg.txt   => Namespace(data_path='xxx', img_width=200, img_height=200)
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后关于参数文件不美观的问题（前面说了，<strong>默认读取文件参数的方法是一行读一个</strong>）,文件读参是通过parser自身的<code>convert_arg_line_to_args()</code>方法。此方法接受从参数文件读取的字符串形式的单个参数 <em>arg_line</em>。 它返回从该字符串解析出的参数列表。 <strong>此方法将在每次按顺序从参数文件读取一行时被调用一次</strong>。</p>
<img src="/2022/080540937/%E5%86%85%E9%83%A8%E4%BB%A3%E7%A0%81.png" class="" title="argparse.ArgumentParser的内部代码">

<p>要让它从不美观变到可读性变强，要怎么做到如下的变化？</p>
<img src="/2022/080540937/%E6%94%B9%E5%89%8D.png" class="">

<img src="/2022/080540937/%E6%94%B9%E5%90%8E.png" class="">

<p>思路如下： 重载<strong>convert_arg_line_to_args()</strong>,将参数文件每一行进行切分，装到一个数组返回， 直接一行就写完。。</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">convert_arg_line_to_args</span><span class="token punctuation">(</span>arg_line<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span>  arg_line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>整体代码如下：</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 文件名train.py 配置文件cfg.txt内容在上面</span>
<span class="token keyword">import</span> os
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> argparse

<span class="token keyword">def</span> <span class="token function">convert_arg_line_to_args</span><span class="token punctuation">(</span>arg_line<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span>  arg_line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"GAT"</span><span class="token punctuation">,</span>fromfile_prefix_chars<span class="token operator">=</span><span class="token string">'@'</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>convert_arg_line_to_args <span class="token operator">=</span> convert_arg_line_to_args
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--data_path'</span><span class="token punctuation">,</span>    type<span class="token operator">=</span>str<span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">"the path of your datasets"</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--img_width'</span><span class="token punctuation">,</span>    type<span class="token operator">=</span>int<span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">"the area width you choose for random crop graph "</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--img_height'</span><span class="token punctuation">,</span>   type<span class="token operator">=</span>int<span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">"the area height you choose for random crop graph "</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>
    argsfile_with_prefix<span class="token operator">=</span><span class="token string">'@'</span><span class="token operator">+</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    args<span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">[</span>argsfile_with_prefix<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    args<span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-shell"><code class="language-shell"># python train.py cfg.txt   => Namespace(data_path='xxx', img_width=200, img_height=200)
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>argparse</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建局部记录（仅供自己翻阅）</title>
    <url>/2022/071962316.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hexo+github搭建博客的完整教学直接看<a href="https://zhuanlan.zhihu.com/p/35668237">这篇</a>，下面是我搭建过程中查阅资料的记录，十分感谢大佬们的无私奉献。</p>
<h2 id="一、-相关环境的搭建"><a href="#一、-相关环境的搭建" class="headerlink" title="一、 相关环境的搭建"></a>一、 相关环境的搭建</h2><h3 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1. 安装node.js"></a>1. 安装node.js</h3><p>Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。</p>
<p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>
<ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ul>
<p><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">上文内容来源</a></p>
<br>

<p>去<a href="https://nodejs.org/en/download/">node.js</a>,下载node.js，npm和它是捆绑在一块的。</p>
<p>可用node-v和npm -v查看node.js和npm的版本，我的如下</p>
<p>node ：v12.22.1    </p>
<p>npm：6.14.12</p>
<p>没有梯子可以添加国内镜像源：</p>
<pre class="line-numbers language-shell"><code class="language-shell">npm config set registry https://registry.npm.taobao.org
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h3><p>npm安装其他包的指令：</p>
<pre class="line-numbers language-shell"><code class="language-shell">npm install xxx xxx为包的名字
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>我要装hexo，运行：</p>
<pre class="line-numbers language-shell"><code class="language-shell">npm install hexo-cli -g
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>-g的意思为 将模块安装到全局（全局路径可以通过<strong>npm root -g</strong>查看）</p>
<p>比如我的是 /usr/local/lib/node_modules（你用npm安装时它会生成一个node_modules的文件夹来保存模块）。</p>
<p>可用<strong>hexo -v</strong>查看hexo 是否安装成功。</p>
<h3 id="3-新建项目"><a href="#3-新建项目" class="headerlink" title="3. 新建项目"></a>3. 新建项目</h3><p>比如我的项目名字叫<strong>test</strong>，在其中<strong>新建一个叫Hexo的文件夹</strong>，并在Hexo中运行下面两行命令来初始化hexo相关组件，结果如下<strong>图1</strong>所示：</p>
<pre class="line-numbers language-shell"><code class="language-shell">hexo init 
npm install
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="/2022/071962316/hexo_init%E7%BB%93%E6%9E%9C.png" class="" title="图1：hexo init 后Hexo文件夹">



<blockquote>
<p>提一下 package.json这个文件，这个文件主要是用来记录这个项目的详细信息的，它会将我们在项目开发中所要用到的包，以及项目的详细信息等记录在这个项目中。如<strong>图2</strong>所示：</p>
<img src="/2022/071962316/package.json%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png" class="" title="图2: package.json文件内容">

<pre class="line-numbers language-shell"><code class="language-shell">npm install --save xxx`  简写：npm install -s xxx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这种方法会将下载的模块信息写入到 package.json 中的dependencies列表中。</p>
<p>参考自：<a href="https://blog.csdn.net/weixin_51369544/article/details/120197353">戴某) npm安装与使用</a></p>
</blockquote>
<h3 id="4-安装git及github与本地项目连接"><a href="#4-安装git及github与本地项目连接" class="headerlink" title="4. 安装git及github与本地项目连接"></a>4. 安装git及github与本地项目连接</h3><p>安装git和github建项目与本地项目连接直接看大佬<a href="https://zhuanlan.zhihu.com/p/35668237">这篇</a>，我自己懒得再敲一遍了。</p>
<h4 id="5-hexo常用命令（引自这篇）："><a href="#5-hexo常用命令（引自这篇）：" class="headerlink" title="5. hexo常用命令（引自这篇）："></a>5. hexo常用命令（引自<a href="https://zhuanlan.zhihu.com/p/11161411">这篇</a>）：</h4><ul>
<li>hexo s等价于 hexo server #Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</li>
<li>hexo g 等价于 hexo generate #生成静态网页 (执行 $ hexo g 后会在站点根目录下生成public&gt;文件夹, hexo会将”&lt;font /blog/source/“ 下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “ 路径下)</li>
<li>hexo d 等价于 hexo deploy #将本地数据部署到远端服务器(如github)</li>
<li>hexo clean #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</li>
</ul>
<h4 id="6-Hexo主题："><a href="#6-Hexo主题：" class="headerlink" title="6. Hexo主题："></a>6. Hexo主题：</h4><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>如何使用该主题及其配置，讲得非常详细。</p>
<h2 id="二、-关于文章"><a href="#二、-关于文章" class="headerlink" title="二、 关于文章"></a>二、 关于文章</h2><h3 id="1-发布文章"><a href="#1-发布文章" class="headerlink" title="1. 发布文章"></a>1. 发布文章</h3><p>建议先在根目录的<code>_config.yml</code>设置</p>
<pre class="line-numbers language-yml"><code class="language-yml">post_asset_folder: true 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这能够在你发布新文章的md时，同时生成一个同名文件夹来保存资源。这样做可以让等等在写文章时以相对路径的方式来调用图片，非常简便。</p>
<p>发布新文章，比如:</p>
<pre class="line-numbers language-shell"><code class="language-shell">hexo new post "xxx"
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后再<strong>source/_post</strong>下可以看到一个xxx.md和xxx的文件夹，你可以把这篇文章使用到的图片放到文件夹中，然后在md中调用该图片的方法是：</p>
<p>其中，example.jpg是文件夹中的图片名字， 后面那个是图的注释。</p>
<pre class="line-numbers language-text"><code class="language-text">{% asset_img example.jpg This is an example image %}
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>详细讲解可见<a href="https://hexo.io/zh-cn/docs/asset-folders">此文</a>。</p>
<p>关于文献引用时的语法见<a href="https://murphy.tech/posts/49cc9dcc.htm">下图3</a>:</p>
<img src="/2022/071962316/%E5%BC%95%E7%94%A8%E6%96%87%E7%8C%AE.png" class="" title="图3: 引用文献的语法">

<h3 id="2-缩短文章对应的网址以便SEO"><a href="#2-缩短文章对应的网址以便SEO" class="headerlink" title="2. 缩短文章对应的网址以便SEO"></a>2. 缩短文章对应的网址以便SEO</h3><p>在根目录的<code>_config.yml</code>文件下修改permalink如下：</p>
<pre class="line-numbers language-yml"><code class="language-yml"># permalink: :year/:month/:day/:title/
permalink: :title/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="三、-音乐播放"><a href="#三、-音乐播放" class="headerlink" title="三、 音乐播放"></a>三、 音乐播放</h2><p><a href="https://blog.17lai.site/posts/cf0f47fd/#%E6%8F%92%E5%85%A5%E9%9F%B3%E4%B9%90%E5%92%8C%E8%A7%86%E9%A2%91">这篇</a>+<a href="https://github.com/metowolf/MetingJS#option">这篇</a>和<a href="https://www.ottoli.cn/wordpress/anm">这篇</a></p>
<p>在文章中加入网易云音乐：网易云找到歌、歌单后生成外链，直接塞到文章里即可。比如：</p>
<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=32303030&amp;auto=1&amp;height=66"></iframe></div>

<h2 id="四、-live2d（看板娘）设置"><a href="#四、-live2d（看板娘）设置" class="headerlink" title="四、 live2d（看板娘）设置"></a>四、 live2d（看板娘）设置</h2><h3 id="1-大佬版的流程"><a href="#1-大佬版的流程" class="headerlink" title="1. 大佬版的流程"></a>1. <a href="https://zhuanlan.zhihu.com/p/58325389">大佬版的流程</a></h3><p>下图4来源自标题的教程，看板娘的属性在waifu.css中设置。</p>
<p><a href="https://github.com/stevenjoezhang/live2d-widget">大佬的live2d链接</a></p>
<img src="/2022/071962316/live2d.png" class="" title="图4: 大佬版的live2d添加流程">



<h3 id="2-基础版的流程"><a href="#2-基础版的流程" class="headerlink" title="2. 基础版的流程"></a>2. 基础版的流程</h3><p>下文内容来源：<a href="https://blog.yleao.com/2018/0805/hexo%E4%B8%8A%E7%9A%84live2d%E5%BA%94%E7%94%A8.html">hexo上的live2d应用</a>（写的真是太好了啊啊）</p>
<h4 id="2-1-安装hexo-helper-live2d"><a href="#2-1-安装hexo-helper-live2d" class="headerlink" title="2.1. 安装hexo-helper-live2d"></a>2.1. 安装<a href="https://github.com/EYHN/hexo-helper-live2d">hexo-helper-live2d</a></h4><pre class="line-numbers language-shell"><code class="language-shell">npm install --save hexo-helper-live2d
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<br>

<h4 id="2-2-配置根目录下的-config-yml"><a href="#2-2-配置根目录下的-config-yml" class="headerlink" title="2.2. 配置根目录下的_config.yml"></a>2.2. 配置根目录下的_config.yml</h4><pre class="line-numbers language-yml"><code class="language-yml">## Live2D
## https://github.com/EYHN/hexo-helper-live2d
live2d:
    enable: true
  # enable: false
    scriptFrom: local # 默认
    pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)
    pluginJsPath: lib/ # 脚本文件相对与插件根目录路径
    pluginModelPath: assets/ # 模型文件相对与插件根目录路径
  # scriptFrom: jsdelivr # jsdelivr CDN
  # scriptFrom: unpkg # unpkg CDN
  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url
    tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中
    debug: false # 调试, 是否在控制台输出日志
    model:
      use: live2d-widget-model-wanko # npm-module package name
    # use: wanko # 博客根目录/live2d_models/ 下的目录名
    # use: ./wives/wanko # 相对于博客根目录的路径
    # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url
    display: # 模型位置，根据不同的模型自行调整
      position: right
      width: 150
      height: 300
    mobile: # 是否适用于移动端
      show: true
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2-3-模型的挑选"><a href="#2-3-模型的挑选" class="headerlink" title="2.3. 模型的挑选"></a>2.3. 模型的挑选</h4><h5 id="方法一：https-github-com-xiazeyu-live2d-widget-models"><a href="#方法一：https-github-com-xiazeyu-live2d-widget-models" class="headerlink" title="方法一：https://github.com/xiazeyu/live2d-widget-models"></a><strong>方法一</strong>：<a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a></h5><p>按照上面的方式装完模型后，它会存储在Hexo/node_modules，然后将包名输入位于<code>_config.yml</code>的<code>model.use</code>中。</p>
<br>

<h5 id="方法二：live2d-models子目录名称"><a href="#方法二：live2d-models子目录名称" class="headerlink" title="方法二：live2d_models子目录名称"></a><strong>方法二：live2d_models子目录名称</strong></h5><ul>
<li><p>在博客根目录下创建一个<code>live2d_models</code>文件夹.</p>
</li>
<li><p>在此文件夹内新建一个子文件夹.</p>
</li>
<li><p>将你的 Live2D 模型复制到这个子文件夹中.</p>
</li>
<li><p>将子文件夹的名称输入<code>_config.yml</code>的<code>model.use</code>中. 　　</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5></li>
<li><p>你的模型叫mymiku.</p>
</li>
<li><p>在博客根目录 (应当有<code>_config.yml</code>、<code>sources</code>、<code>themes</code>) 新建名为<code>live2d_models</code>的目录，再在其中建一个名为<code>mymiku</code>的子文件夹.</p>
</li>
<li><p>将模型复制到 <code>/live2d_models/mymiku/</code>中.现在在此文件夹里应当有一个 <code>.model.json</code>文件 (例如<code>mymiku.model.json</code>)</p>
</li>
<li><p>将 子文件夹名称<code>mymiku</code>输入到位于根目录<code>_config.yml</code>的<code>model.use</code>中</p>
</li>
</ul>
<h4 id="2-4-模型的来源"><a href="#2-4-模型的来源" class="headerlink" title="2.4. 模型的来源"></a>2.4. 模型的来源</h4><p>最后再贴一个在github上找到的模型，种类挺多，可预览，<a href="https://github.com/summerscar/live2dDemo">github地址</a>。<br>修改modelname进行预览，modelname可在<a href="https://github.com/summerscar/live2dDemo/blob/master/README.md">这里</a>查阅，<a href="http://summerscar.me/live2dDemo/">预览地址</a>。<br>使用方法很简单，打包下载下来，解压后在<code>/live2dDemo-master/assets/</code>中找到喜欢的模型，按照上面<strong>2.3.</strong> 中的方法二，直接把模型所在的文件夹拖入到博客根目录中的<code>live2d_models</code>里，再修改<code>_config.yml</code> 里的 <code>model.use</code>即可。</p>
]]></content>
      <categories>
        <category>搭建网站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
